//package com.zhenxuan.utils.util;
//
//import io.jsonwebtoken.*;
//import org.apache.commons.codec.binary.Base64;
//
//import javax.crypto.spec.SecretKeySpec;
//import java.security.Key;
//import java.util.Date;
//import java.util.Map;
//import java.util.UUID;
//
///**
// * Jwt工具类
// * @author adminNavice_G
// * @time 2020-08-04
// *
// * 需要添加到jar包
// * <dependency>
// * <groupId>com.auth0</groupId>
// * <artifactId>java-jwt</artifactId>
// * <version>3.2.0</version>
// *</dependency>
// * <dependency>
// * <groupId>io.jsonwebtoken</groupId>
// * <artifactId>jjwt</artifactId>
// *<version>0.7.0</version>
// *</dependency>
// *
// *
// *
// *
// */
//public class JwtUtils {
//
//    //定义签发主体
//    private static final String SUBJECT_NAME="LING_ZSJ";
//
//    //定义Token的唯一身份标识防止,用来做一次性Token防止Token攻击
//    private static final String uuid =UUID.randomUUID().toString().replaceAll("-","");
//
//    //定义Token的签发者信息
//    private static final String  ISSUER ="Ling";
//
//    //定义Token的有效时间(小时)
//    private static final long VALID_TIME_MILLIS =2 * 60 * 60 * 1000;
//
//    //定义加密类型
//    private static final SignatureAlgorithm JWT_KEY =SignatureAlgorithm.HS256;
//
//    //指定Token加密时的原密码
//    private static final String TOKEN_YM="QVQLingZXiZbER";
//    /**
//     * 根据实体类对象创建TOKEN
//     * @param
//     * @return
//     */
//    public static String createJwtToken(){
//        //获取当前时间
//        long beginTimeMillis = System.currentTimeMillis();
//        Date beginDate =new Date(beginTimeMillis);
//        String token =Jwts.builder()
//                .setHeaderParam("alg","H256")
//                .setHeaderParam("typ","JWT")
//                .setSubject(SUBJECT_NAME)
//                .setId(uuid)
//                .setIssuer(ISSUER)
//                .setIssuedAt(beginDate)
//                .setExpiration(new Date(beginTimeMillis+VALID_TIME_MILLIS))
//                .claim("uid","") //主键
//                .claim("name","Parker") //用户名
//                .signWith(JWT_KEY,generateKey())
//                .compact();
//        return token;
//    }
//
//
//
//    /**
//     * 根据Map集合创建Token
//     * @param tokenMap Token字符串中需要写到的参数Map
//     * @return
//     */
//    public static String createToken(Map<String,Object> tokenMap) throws Exception {
//        //获取当前时间
//        long beginTimeMillis = System.currentTimeMillis();
//        Date beginDate = new Date(beginTimeMillis);
//        //确保传递的参数中有值
//        JwtBuilder builder = Jwts.builder();
//        if (tokenMap.isEmpty()){
//            throw new Exception("未能获取到参数验证登陆失败");
//        }
//        //方式一(任选其一):
//        tokenMap.forEach((key,value) ->{
//            builder.claim(key,value.toString());
//        });
//        //方式2:
//        //builder.setClaims(tokenMap);
//       String token = Jwts.builder()
//                .setHeaderParam("alg","H256")
//                .setHeaderParam("typ","JWT")
//                .setSubject(SUBJECT_NAME)
//                .setIssuer(uuid)
//                .setIssuer(ISSUER)
//                .setIssuedAt(beginDate)
//                .setExpiration(new Date(beginTimeMillis+VALID_TIME_MILLIS))
//                .signWith(JWT_KEY,generateKey())
//                .compact();
//       return token;
//    }
//
//    //加密
//    private static Key generateKey() {
//        //将密码转化为字节数组
//        byte[] bytes = Base64.decodeBase64(TOKEN_YM);
//        //生成密匙
//        SecretKeySpec keySpec = new SecretKeySpec(bytes, JWT_KEY.getJcaName());
//        return keySpec;
//    }
//
//    //将Token解密
//    public static Jws<Claims> analysisToken(String token){
//        return Jwts.parser().setSigningKey(generateKey()).parseClaimsJws(token);
//    }
//
//    //验证Token的过期时间
//    public static boolean ExpirationTime(Date expirationTime){
//        //获取到当前时间
//        return expirationTime.before(new Date());
//    }
//    //效验Token是否是本服务的Token
//    public static boolean checkToken(String token){
//       return analysisToken(token).getBody() !=null;
//    }
//
//    //效验TOKEN是否是本系统签发的token
//    public static boolean SubjectToken(String token){
//        return analysisToken(token).getBody().getSubject().equals(SUBJECT_NAME);
//    }
//}
